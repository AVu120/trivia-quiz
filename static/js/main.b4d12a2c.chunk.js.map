{"version":3,"sources":["components/common/progress/ProgressBar.module.css","pages/Results/Results.module.css","App/App.module.css","components/AnswerGrid/AnswerGrid.module.css","components/common/buttons/Button/Button.js","App/standard-colors.js","App/App.style.js","components/common/LoadingIndicator/LoadingIndicator.js","components/common/Title/Title.js","components/common/inputs/Textfield/Textfield.js","components/common/inputs/Dropdown/Dropdown.js","components/common/buttons/radioButtons/RadioButtons/RadioButtons.js","pages/Menu/Menu.style.js","pages/Menu/Menu.js","components/AnswerGrid/AnswerGrid.style.js","components/AnswerGrid/AnswerGrid.js","components/common/buttons/iconButtons/LeftArrowIconButton.js","components/common/buttons/iconButtons/RestartIconButton.js","components/common/buttons/iconButtons/RightArrowIconButton.js","components/common/progress/ProgressBar.js","components/common/modals/Confirmation.js","components/common/modals/Alert.js","modules/StringModifiers.js","pages/Questions/Questions.js","components/common/Table/Table.js","pages/Results/Results.js","App/App.js","serviceWorker.js","index.js","pages/Menu/Menu.module.css","pages/Questions/Questions.module.css"],"names":["module","exports","GenericButton","label","variant","color","onClick","style","labelStyle","classes","makeStyles","root","textTransform","useStyles","Button","pink","buttonStyle","padding","fontSize","backgroundColor","colors","fontWeight","LoadingIndicator","size","onRestart","quizData","titleClassName","theme","className","appStyle","CircularProgress","Title","title","Textfield","onChange","type","value","helperText","error","inputProps","TextField","Dropdown","options","inputStyle","listboxStyle","Autocomplete","getOptionLabel","option","name","renderInput","params","RadioButtonsGroup","values","ModifiedRadio","withStyles","checked","props","Radio","FormControl","component","FormLabel","RadioGroup","aria-label","map","_","FormControlLabel","control","charAt","toUpperCase","slice","difficulties","types","textFieldStyle","borderColor","borderWidth","dropdownStyle","inputRoot","height","Menu","menuActions","menuState","useState","categories","setCategories","useEffect","fetch","then","response","json","data","id","concat","trivia_categories","styles","menu","menu__title","changeNumberOfQuestions","numberOfQuestions","isNumberOfQuestionsValid","menu__input","changeCategory","category","changeDifficulty","difficulty","changeType","useDuration","changeUseDuration","changeQuizDuration","quizDuration","menu__buttonContainer","startQuiz","display","flexDirection","alignItems","nonSelectedButtonStyle","selectedButtonStyle","AnswerGrid","answers","setSelectedAnswerIndex","selectedAnswerIndex","isBoolean","length","answerGrid","LeftArrowIconButton","tooltipTitle","iconStyle","Tooltip","IconButton","RightArrowIconButton","ProgressBar","total","bar","bar__progress","bar__remainder","ConfirmationModalComponent","text","open","togglePrompt","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","justifyContent","autoFocus","AlertModalComponent","htmlsToReplace","convertToRegularString","string","modifiedString","Object","entries","html","replacementString","replace","RegExp","removeHTMLCharacters","hex","dec","String","fromCharCode","Questions","setQuizData","setCurrentPage","restartQuiz","currentPage","questionId","setQuestionId","confirmationPrompt","setconfirmationPrompt","alertPrompt","setAlertPrompt","countdown","setCountdown","deadline","moment","add","toggleConfirmationPrompt","toggleAlertPrompt","onClickBackButton","onClickNextButton","object","index","startCountdown","setInterval","now","currentTimeLeft","duration","diff","asSeconds","console","log","clearInterval","questionsContainer","questions__countdownTimer","seconds","showMilliseconds","timeFormat","alpha","onComplete","questions__title","question","questions__buttonsContainer","RestartIconButton","questions__progressBar","questions__loadingIndicator","Confirmation","Alert","tableTheme","createMuiTheme","overrides","MUIDataTable","responsiveScroll","maxHeight","Table","columns","labeledColumns","filter","sort","setCellHeaderProps","columnMeta","labeledData","rowIndex","rowDataObject","rowElementIndex","parseInt","ThemeProvider","setRowProps","row","dataIndex","responsive","Results","questionNumber","correctAnswer","results","results__title","finalScore","getFinalScore","App","setNumberOfQuestions","setCategory","setDifficulty","setType","setUseDuration","setQuizDuration","errorPrompt","setErrorPrompt","toggleErrorPrompt","isFormValid","event","parseFloat","target","selectedOption","incorrect_answers","correct_answer","App__card","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b4d12a2c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bar\":\"ProgressBar_bar__3nw9_\",\"progressText\":\"ProgressBar_progressText__12_Jn\",\"bar__progress\":\"ProgressBar_bar__progress__1diGu\",\"bar__remainder\":\"ProgressBar_bar__remainder__3JdDE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"results\":\"Results_results__3sBfs\",\"results__title\":\"Results_results__title__1THxs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__dfiYW\",\"App__card\":\"App_App__card__8QBzq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"answerGrid\":\"AnswerGrid_answerGrid__5w_nP\"};","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst GenericButton = ({\r\n  label,\r\n  variant,\r\n  color,\r\n  onClick,\r\n  style,\r\n  labelStyle,\r\n}) => {\r\n  const useStyles = makeStyles({\r\n    root: { ...style, textTransform: \"none\" },\r\n    label: labelStyle,\r\n  });\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <Button\r\n        variant={variant}\r\n        classes={classes}\r\n        color={color}\r\n        onClick={onClick}\r\n      >\r\n        {label}\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GenericButton;\r\n","export const pink = \"#fd5660\";\r\nexport const lightBeige = \"#F6F3E4\";\r\nexport const yellow = \"#f9da11\";\r\nexport const red = \"#f90004\";\r\nexport const green = \"#21BA45\";\r\n","import * as colors from \"./standard-colors\";\r\n\r\nexport const buttonStyle = {\r\n  padding: \"0.5vh\",\r\n  fontSize: \"1.5vh\",\r\n  backgroundColor: colors.pink,\r\n  color: \"#FFF\",\r\n  fontWeight: \"bold\",\r\n  \"&:hover\": {\r\n    backgroundColor: colors.pink,\r\n    color: \"#FFF\",\r\n    fontWeight: \"bold\",\r\n  },\r\n};\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport RestartButton from \"../../common/buttons/Button/Button\";\r\nimport * as colors from \"../../../App/standard-colors\";\r\nimport * as appStyle from \"../../../App/App.style\";\r\n\r\nconst LoadingIndicator = ({\r\n  size,\r\n  style,\r\n  label,\r\n  onRestart,\r\n  quizData,\r\n  titleClassName,\r\n}) => {\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: style,\r\n  }));\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <h1 className={titleClassName}>{label}</h1>\r\n      {!quizData ? (\r\n        <CircularProgress size={size} style={{ color: colors.pink }} />\r\n      ) : (\r\n        <RestartButton\r\n          label=\"RESTART\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={onRestart}\r\n          style={appStyle.buttonStyle}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingIndicator;\r\n","import React from \"react\";\r\n\r\nconst Title = ({ title, className }) => {\r\n  return (\r\n    <div>\r\n      <h1 className={className}>{title}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst Textfield = ({\r\n  label,\r\n  variant,\r\n  onChange,\r\n  type,\r\n  style,\r\n  value,\r\n  helperText,\r\n  error,\r\n  className,\r\n  inputProps,\r\n}) => {\r\n  const useStyles = makeStyles(style);\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <TextField\r\n        classes={classes}\r\n        className={className}\r\n        error={error}\r\n        label={label}\r\n        variant={variant}\r\n        onChange={onChange}\r\n        inputProps={{\r\n          style: inputProps,\r\n        }}\r\n        type={type}\r\n        value={value}\r\n        helperText={error ? helperText : \"\"}\r\n        size=\"small\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Textfield;\r\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst Dropdown = ({\r\n  options,\r\n  label,\r\n  variant,\r\n  inputStyle,\r\n  listboxStyle,\r\n  onChange,\r\n  value,\r\n  className,\r\n}) => {\r\n  const useStyles = makeStyles(inputStyle);\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <Autocomplete\r\n        options={options}\r\n        classes={classes}\r\n        className={className}\r\n        getOptionLabel={(option) => option.name}\r\n        onChange={onChange}\r\n        size=\"small\"\r\n        value={value}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            // color=\"secondary\"\r\n            label={label}\r\n            variant={variant}\r\n          />\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dropdown;\r\n","import React from \"react\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport default function RadioButtonsGroup({\r\n  label,\r\n  values,\r\n  value,\r\n  onChange,\r\n  color,\r\n}) {\r\n  const ModifiedRadio = withStyles({\r\n    root: {\r\n      color: \"black\",\r\n      \"&$checked\": {\r\n        color: color,\r\n      },\r\n    },\r\n    checked: {},\r\n  })((props) => <Radio {...props} />);\r\n\r\n  return (\r\n    <FormControl component=\"fieldset\">\r\n      <FormLabel\r\n        component=\"legend\"\r\n        style={{ color: \"black\", fontSize: \"11.5px\" }}\r\n      >\r\n        {label}\r\n      </FormLabel>\r\n      <RadioGroup\r\n        aria-label=\"gender\"\r\n        name=\"gender1\"\r\n        value={value}\r\n        onChange={onChange}\r\n      >\r\n        {values.map((_) => (\r\n          <FormControlLabel\r\n            value={_}\r\n            control={<ModifiedRadio />}\r\n            label={_.charAt(0).toUpperCase() + _.slice(1)}\r\n          />\r\n        ))}\r\n      </RadioGroup>\r\n    </FormControl>\r\n  );\r\n}\r\n","// Color constants\r\nimport * as colors from \"../../App/standard-colors\";\r\n\r\nexport const unhighlightedBlack = \"black\";\r\nexport const highlightedPink = colors.pink;\r\n\r\nexport const difficulties = [\r\n  { name: \"Any Difficulty\", value: null },\r\n  { name: \"Easy\", value: \"easy\" },\r\n  { name: \"Medium\", value: \"medium\" },\r\n  { name: \"Hard\", value: \"hard\" },\r\n];\r\n\r\nexport const types = [\r\n  { name: \"Any Type\", value: null },\r\n  { name: \"Multiple Choice\", value: \"multiple\" },\r\n  { name: \"True / False\", value: \"boolean\" },\r\n];\r\n\r\nexport const textFieldStyle = {\r\n  root: {\r\n    \"& .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\r\n      borderColor: unhighlightedBlack,\r\n    },\r\n    \"&:hover .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\r\n      borderColor: highlightedPink,\r\n    },\r\n    \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\": {\r\n      borderColor: highlightedPink,\r\n      borderWidth: \"medium\",\r\n    },\r\n    \"& .MuiInputLabel-root\": {\r\n      color: unhighlightedBlack,\r\n    },\r\n    \"&:hover .MuiInputLabel-root\": {\r\n      color: highlightedPink,\r\n    },\r\n    \"& .MuiInputLabel-root.Mui-focused\": {\r\n      color: highlightedPink,\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n};\r\n\r\nexport const dropdownStyle = {\r\n  root: {\r\n    \"& .MuiAutocomplete-inputRoot .MuiOutlinedInput-notchedOutline\": {\r\n      borderColor: unhighlightedBlack,\r\n    },\r\n    \"&:hover .MuiAutocomplete-inputRoot .MuiOutlinedInput-notchedOutline\": {\r\n      borderColor: highlightedPink,\r\n    },\r\n    \"& .MuiAutocomplete-inputRoot.Mui-focused .MuiOutlinedInput-notchedOutline\": {\r\n      borderColor: highlightedPink,\r\n      borderWidth: \"medium\",\r\n    },\r\n    \"& .MuiInputLabel-root\": {\r\n      color: unhighlightedBlack,\r\n    },\r\n    \"&:hover .MuiInputLabel-root\": {\r\n      color: highlightedPink,\r\n    },\r\n    \"& .MuiInputLabel-root.Mui-focused\": {\r\n      color: highlightedPink,\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  inputRoot: {\r\n    height: \"5vh\",\r\n    fontSize: \"clamp(10px, 2vh, 15px)\",\r\n  },\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport LoadingIndicator from \"../../components/common/LoadingIndicator/LoadingIndicator\";\r\nimport Title from \"../../components/common/Title/Title\";\r\nimport NumberOfQuestionsField from \"../../components/common/inputs/Textfield/Textfield\";\r\nimport CategoryDropdown from \"../../components/common/inputs/Dropdown/Dropdown\";\r\nimport DifficultyDropdown from \"../../components/common/inputs/Dropdown/Dropdown\";\r\nimport TypeDropdown from \"../../components/common/inputs/Dropdown/Dropdown\";\r\nimport ToggleDuration from \"../../components/common/buttons/radioButtons/RadioButtons/RadioButtons\";\r\nimport DurationInput from \"../../components/common/inputs/Textfield/Textfield\";\r\nimport StartQuizButton from \"../../components/common/buttons/Button/Button\";\r\nimport styles from \"./Menu.module.css\";\r\nimport * as appStyle from \"../../App/App.style\";\r\nimport * as style from \"./Menu.style\";\r\n\r\nconst Menu = ({ menuActions, menuState }) => {\r\n  const [categories, setCategories] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://opentdb.com/api_category.php\")\r\n      .then((response) => response.json())\r\n      .then((data) =>\r\n        setCategories(\r\n          [\r\n            {\r\n              name: \"Any Category\",\r\n              id: null,\r\n            },\r\n          ].concat(data.trivia_categories)\r\n        )\r\n      );\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        {categories ? (\r\n          <div className={styles.menu}>\r\n            <div>\r\n              <Title className={styles.menu__title} title=\"Trivia Quiz\" />\r\n            </div>\r\n            <div>\r\n              <NumberOfQuestionsField\r\n                label=\"Number of questions\"\r\n                variant=\"outlined\"\r\n                type=\"number\"\r\n                onChange={menuActions.changeNumberOfQuestions}\r\n                style={style.textFieldStyle}\r\n                inputProps={{\r\n                  height: \"3vh\",\r\n                  fontSize: \"clamp(10px, 2vh, 15px)\",\r\n                }}\r\n                value={menuState.numberOfQuestions}\r\n                helperText=\"Error: Number must be an integer less than or equal to 50.\"\r\n                error={!menuState.isNumberOfQuestionsValid}\r\n                className={styles.menu__input}\r\n              />\r\n            </div>\r\n            <div>\r\n              <CategoryDropdown\r\n                options={categories}\r\n                label=\"Category\"\r\n                variant=\"outlined\"\r\n                inputStyle={style.dropdownStyle}\r\n                onChange={menuActions.changeCategory}\r\n                value={menuState.category}\r\n                className={styles.menu__input}\r\n              />\r\n            </div>\r\n            <div>\r\n              <DifficultyDropdown\r\n                options={style.difficulties}\r\n                label=\"Difficulty\"\r\n                variant=\"outlined\"\r\n                inputStyle={style.dropdownStyle}\r\n                onChange={menuActions.changeDifficulty}\r\n                value={menuState.difficulty}\r\n                className={styles.menu__input}\r\n              />\r\n            </div>\r\n            <div>\r\n              <TypeDropdown\r\n                options={style.types}\r\n                label=\"Question type\"\r\n                variant=\"outlined\"\r\n                inputStyle={style.dropdownStyle}\r\n                onChange={menuActions.changeType}\r\n                value={menuState.type}\r\n                className={styles.menu__input}\r\n              />\r\n            </div>\r\n            <div>\r\n              <ToggleDuration\r\n                label=\"Set time limit?\"\r\n                values={[\"yes\", \"no\"]}\r\n                value={menuState.useDuration}\r\n                onChange={menuActions.changeUseDuration}\r\n                color={style.highlightedPink}\r\n              />\r\n            </div>\r\n            {menuState.useDuration === \"yes\" && (\r\n              <div>\r\n                <DurationInput\r\n                  label=\"Time limit (in minutes)\"\r\n                  variant=\"outlined\"\r\n                  type=\"number\"\r\n                  onChange={menuActions.changeQuizDuration}\r\n                  style={style.textFieldStyle}\r\n                  value={menuState.quizDuration}\r\n                  helperText=\"Error: Number must be greater than 0.\"\r\n                  error={!(menuState.quizDuration > 0)}\r\n                  className={styles.menu__input}\r\n                  inputProps={{\r\n                    height: \"3vh\",\r\n                    fontSize: \"clamp(10px, 2vh, 15px)\",\r\n                  }}\r\n                />\r\n              </div>\r\n            )}\r\n            <div className={styles.menu__buttonContainer}>\r\n              <StartQuizButton\r\n                label=\"Start\"\r\n                variant=\"contained\"\r\n                onClick={menuActions.startQuiz}\r\n                style={appStyle.buttonStyle}\r\n              />\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <LoadingIndicator\r\n              size=\"10vh\"\r\n              label=\"Menu Loading\"\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                alignItems: \"center\",\r\n              }}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import * as colors from \"../../App/standard-colors\";\r\n\r\nexport const nonSelectedButtonStyle = {\r\n  padding: \"0.5vh\",\r\n  backgroundColor: colors.lightBeige,\r\n  fontWeight: \"bold\",\r\n  \"&:hover\": {\r\n    backgroundColor: colors.lightBeige,\r\n    color: \"black\",\r\n    fontWeight: \"bold\",\r\n  },\r\n};\r\n\r\nexport const selectedButtonStyle = {\r\n  padding: \"0.5vh\",\r\n  backgroundColor: colors.pink,\r\n  color: \"#FFF\",\r\n  fontWeight: \"bold\",\r\n  \"&:hover\": {\r\n    backgroundColor: colors.pink,\r\n    color: \"#FFF\",\r\n    fontWeight: \"bold\",\r\n  },\r\n};\r\n","import React from \"react\";\r\nimport AnswerButton from \"../common/buttons/Button/Button\";\r\nimport styles from \"./AnswerGrid.module.css\";\r\nimport * as style from \"./AnswerGrid.style\";\r\n\r\nconst AnswerGrid = ({\r\n  answers,\r\n  setSelectedAnswerIndex,\r\n  selectedAnswerIndex,\r\n}) => {\r\n  const isBoolean = answers && answers.length === 2;\r\n\r\n  return (\r\n    <div className={styles.answerGrid}>\r\n      <AnswerButton\r\n        label={isBoolean ? answers && answers[1] : answers && answers[0]}\r\n        variant=\"contained\"\r\n        onClick={\r\n          isBoolean\r\n            ? () => setSelectedAnswerIndex(1)\r\n            : () => setSelectedAnswerIndex(0)\r\n        }\r\n        style={\r\n          isBoolean\r\n            ? selectedAnswerIndex === 1\r\n              ? style.selectedButtonStyle\r\n              : style.nonSelectedButtonStyle\r\n            : selectedAnswerIndex === 0\r\n            ? style.selectedButtonStyle\r\n            : style.nonSelectedButtonStyle\r\n        }\r\n      />\r\n      <AnswerButton\r\n        label={isBoolean ? answers && answers[0] : answers && answers[1]}\r\n        variant=\"contained\"\r\n        onClick={\r\n          isBoolean\r\n            ? () => setSelectedAnswerIndex(0)\r\n            : () => setSelectedAnswerIndex(1)\r\n        }\r\n        style={\r\n          isBoolean\r\n            ? selectedAnswerIndex === 0\r\n              ? style.selectedButtonStyle\r\n              : style.nonSelectedButtonStyle\r\n            : selectedAnswerIndex === 1\r\n            ? style.selectedButtonStyle\r\n            : style.nonSelectedButtonStyle\r\n        }\r\n      />\r\n      {!isBoolean && (\r\n        <AnswerButton\r\n          label={answers && answers[2]}\r\n          variant=\"contained\"\r\n          onClick={() => setSelectedAnswerIndex(2)}\r\n          style={\r\n            selectedAnswerIndex === 2\r\n              ? style.selectedButtonStyle\r\n              : style.nonSelectedButtonStyle\r\n          }\r\n        />\r\n      )}\r\n      {!isBoolean && (\r\n        <AnswerButton\r\n          label={answers && answers[3]}\r\n          variant=\"contained\"\r\n          onClick={() => setSelectedAnswerIndex(3)}\r\n          style={\r\n            selectedAnswerIndex === 3\r\n              ? style.selectedButtonStyle\r\n              : style.nonSelectedButtonStyle\r\n          }\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnswerGrid;\r\n","import React from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport LeftArrowIcon from \"@material-ui/icons/KeyboardArrowLeft\";\r\n\r\nconst LeftArrowIconButton = ({\r\n  tooltipTitle,\r\n  color,\r\n  onClick,\r\n  iconStyle,\r\n  buttonStyle,\r\n}) => {\r\n  return (\r\n    <Tooltip title={tooltipTitle}>\r\n      <IconButton style={buttonStyle} color={color} onClick={onClick}>\r\n        <LeftArrowIcon style={iconStyle} />\r\n      </IconButton>\r\n    </Tooltip>\r\n  );\r\n};\r\n\r\nexport default LeftArrowIconButton;\r\n","import React from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport RestartIcon from \"@material-ui/icons/Refresh\";\r\n\r\nconst LeftArrowIconButton = ({\r\n  tooltipTitle,\r\n  color,\r\n  onClick,\r\n  iconStyle,\r\n  buttonStyle,\r\n}) => {\r\n  return (\r\n    <Tooltip title={tooltipTitle}>\r\n      <IconButton style={buttonStyle} color={color} onClick={onClick}>\r\n        <RestartIcon style={iconStyle} />\r\n      </IconButton>\r\n    </Tooltip>\r\n  );\r\n};\r\n\r\nexport default LeftArrowIconButton;\r\n","import React from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport RightArrowIcon from \"@material-ui/icons/KeyboardArrowRight\";\r\n\r\nconst RightArrowIconButton = ({\r\n  tooltipTitle,\r\n  color,\r\n  onClick,\r\n  iconStyle,\r\n  buttonStyle,\r\n}) => {\r\n  return (\r\n    <Tooltip title={tooltipTitle}>\r\n      <IconButton style={buttonStyle} color={color} onClick={onClick}>\r\n        <RightArrowIcon style={iconStyle} />\r\n      </IconButton>\r\n    </Tooltip>\r\n  );\r\n};\r\n\r\nexport default RightArrowIconButton;\r\n","import React from \"react\";\r\nimport styles from \"./ProgressBar.module.css\";\r\nimport * as colors from \"../../../App/standard-colors\";\r\n\r\nconst ProgressBar = ({ value, total }) => {\r\n  return (\r\n    <div className={styles.bar}>\r\n      <div\r\n        style={{\r\n          \"--width\": `${(value / total) * 100}%`,\r\n          \"--backgroundColor\": value !== total ? colors.pink : colors.green,\r\n        }}\r\n        className={styles.bar__progress}\r\n      ></div>\r\n      <div className={styles.bar__remainder}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport * as colors from \"../../../App/standard-colors\";\r\n\r\nconst ConfirmationModalComponent = ({\r\n  title,\r\n  text,\r\n  open,\r\n  togglePrompt,\r\n  onRestart,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        {title && <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>}\r\n        {text && (\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              {text}\r\n            </DialogContentText>\r\n          </DialogContent>\r\n        )}\r\n        <DialogActions style={{ justifyContent: \"center\" }}>\r\n          <Button\r\n            onClick={togglePrompt}\r\n            // color=\"primary\"\r\n            style={{ fontWeight: \"bold\", color: colors.pink }}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={onRestart}\r\n            // color=\"primary\"\r\n            autoFocus\r\n            style={{ fontWeight: \"bold\", color: colors.pink }}\r\n          >\r\n            Yes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfirmationModalComponent;\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport * as colors from \"../../../App/standard-colors\";\r\n\r\nconst AlertModalComponent = ({ title, text, open, togglePrompt }) => {\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        {title && <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>}\r\n        {text && (\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              {text}\r\n            </DialogContentText>\r\n          </DialogContent>\r\n        )}\r\n        <DialogActions style={{ justifyContent: \"center\" }}>\r\n          <Button\r\n            onClick={togglePrompt}\r\n            color=\"primary\"\r\n            style={{ fontWeight: \"bold\", color: colors.pink }}\r\n          >\r\n            OK\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlertModalComponent;\r\n","import _ from \"lodash\";\r\n\r\nconst htmlsToReplace = {\r\n  \"&quot;\": `\"`,\r\n  \"&amp;\": \"&\",\r\n  \"&shy;\": \"-\",\r\n  \"&eacute;\": \"é\",\r\n  \"&Uuml;\": \"Ü\",\r\n  \"&uuml;\": `ü`,\r\n  \"&ldquo;\": `‘`,\r\n  \"&rsquo;\": `’`,\r\n  \"&#039;\": `'`,\r\n  \"&euml;\": `ë`,\r\n  \"&rdquo;\": `”`,\r\n  \"&Iacute;\": `Í`,\r\n  \"&aacute;\": `á`,\r\n  \"&Aacute;\": `Á`,\r\n  \"&ntilde;\": `ñ`,\r\n  \"&pi;\": `π`,\r\n  \"&ouml\": `ö`,\r\n  \"&Ouml\": `Ö`,\r\n  \"&iacute\": `í`,\r\n  \"&deg;\": `°`,\r\n};\r\n\r\nconst removeHTMLCharacters = (string) => {\r\n  let modifiedString = string;\r\n  for (let [html, replacementString] of Object.entries(htmlsToReplace)) {\r\n    modifiedString = _.replace(\r\n      modifiedString,\r\n      new RegExp(html, \"g\"),\r\n      replacementString\r\n    );\r\n  }\r\n  return modifiedString;\r\n};\r\n\r\nexport const convertToRegularString = (string) => {\r\n  return removeHTMLCharacters(\r\n    string &&\r\n      string.replace(/&#(?:x([\\da-f]+)|(\\d+));/gi, function (_, hex, dec) {\r\n        return String.fromCharCode(dec || +(\"0x\" + hex));\r\n      })\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport AnswerGrid from \"../../components/AnswerGrid/AnswerGrid\";\r\nimport LeftArrowIconButton from \"../../components/common/buttons/iconButtons/LeftArrowIconButton\";\r\nimport RestartIconButton from \"../../components/common/buttons/iconButtons/RestartIconButton\";\r\nimport RightArrowIconButton from \"../../components/common/buttons/iconButtons/RightArrowIconButton\";\r\nimport LoadingIndicator from \"../../components/common/LoadingIndicator/LoadingIndicator\";\r\nimport Title from \"../../components/common/Title/Title\";\r\nimport ProgressBar from \"../../components/common/progress/ProgressBar\";\r\nimport ConfirmationPrompt from \"../../components/common/modals/Confirmation\";\r\nimport AlertPrompt from \"../../components/common/modals/Alert\";\r\nimport CountdownClock from \"react-countdown-clock\";\r\nimport { convertToRegularString } from \"../../modules/StringModifiers\";\r\nimport moment from \"moment\";\r\nimport styles from \"./Questions.module.css\";\r\nimport * as colors from \"../../App/standard-colors\";\r\n\r\nconst Questions = ({\r\n  quizData,\r\n  setQuizData,\r\n  setCurrentPage,\r\n  restartQuiz,\r\n  useDuration,\r\n  quizDuration,\r\n  currentPage,\r\n}) => {\r\n  const [questionId, setQuestionId] = useState(0);\r\n  const [confirmationPrompt, setconfirmationPrompt] = useState(false);\r\n  const [alertPrompt, setAlertPrompt] = useState(false);\r\n  const [countdown, setCountdown] = useState(null);\r\n\r\n  const deadline = moment().add(quizDuration, \"minutes\");\r\n\r\n  const toggleConfirmationPrompt = () =>\r\n    setconfirmationPrompt(!confirmationPrompt);\r\n\r\n  const toggleAlertPrompt = () => setAlertPrompt(!alertPrompt);\r\n\r\n  const selectedAnswerIndex =\r\n    quizData &&\r\n    quizData[questionId] &&\r\n    quizData[questionId].selectedAnswerIndex;\r\n  const incrementQuestionId = () => setQuestionId(questionId + 1);\r\n  const decrementQuestionId = () => setQuestionId(questionId - 1);\r\n\r\n  const onClickBackButton = () => {\r\n    if (\r\n      quizData[questionId].selectedAnswerIndex ||\r\n      quizData[questionId].selectedAnswerIndex === 0\r\n    )\r\n      setSelectedAnswerIndex(quizData[questionId].selectedAnswerIndex);\r\n    else setSelectedAnswerIndex(null);\r\n    decrementQuestionId();\r\n  };\r\n\r\n  const onClickNextButton = () => {\r\n    if (\r\n      quizData[questionId].selectedAnswerIndex ||\r\n      quizData[questionId].selectedAnswerIndex === 0\r\n    )\r\n      setSelectedAnswerIndex(quizData[questionId].selectedAnswerIndex);\r\n    else setSelectedAnswerIndex(null);\r\n    incrementQuestionId();\r\n  };\r\n\r\n  const setSelectedAnswerIndex = (selectedAnswerIndex) =>\r\n    setQuizData(\r\n      quizData.map((object, index) =>\r\n        index === questionId\r\n          ? { ...quizData[questionId], selectedAnswerIndex }\r\n          : object\r\n      )\r\n    );\r\n\r\n  const onClickFinishButton = () => {\r\n    setCurrentPage(\"results\");\r\n  };\r\n\r\n  // Start countdown\r\n  useEffect(() => {\r\n    if (useDuration === \"yes\") {\r\n      const startCountdown = setInterval(() => {\r\n        const now = moment();\r\n        const currentTimeLeft = moment.duration(deadline.diff(now));\r\n        if (currentTimeLeft.asSeconds() > 0 && currentPage === \"questions\") {\r\n          console.log(\"Decrement\");\r\n          setCountdown(currentTimeLeft.asSeconds());\r\n        } else {\r\n          clearInterval(startCountdown);\r\n          console.log(\"Done\");\r\n        }\r\n      }, 1000);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        {quizData && quizData.length > 0 ? (\r\n          <div className={styles.questionsContainer}>\r\n            {useDuration === \"yes\" && (\r\n              <div className={styles.questions__countdownTimer}>\r\n                <CountdownClock\r\n                  seconds={quizDuration * 60}\r\n                  showMilliseconds={true}\r\n                  timeFormat=\"hms\"\r\n                  color={`${\r\n                    countdown < 60 && countdown >= 10\r\n                      ? colors.yellow // yellow warning for < 1 minute left on countdown.\r\n                      : countdown < 10\r\n                      ? colors.red // red warning for less than 10s left on countdown.\r\n                      : colors.pink\r\n                  }`}\r\n                  alpha={0.9}\r\n                  size={100}\r\n                  fontSize=\"auto\"\r\n                  onComplete={() => setCurrentPage(\"results\")}\r\n                />\r\n              </div>\r\n            )}\r\n            <div>\r\n              <Title\r\n                className={styles.questions__title}\r\n                title={`${questionId + 1}. ${\r\n                  quizData[questionId] &&\r\n                  convertToRegularString(quizData[questionId].question)\r\n                }`}\r\n              />\r\n            </div>\r\n            <AnswerGrid\r\n              answers={\r\n                quizData[questionId] &&\r\n                quizData[questionId].answers.map((_) =>\r\n                  convertToRegularString(_)\r\n                )\r\n              }\r\n              selectedAnswerIndex={selectedAnswerIndex}\r\n              setSelectedAnswerIndex={setSelectedAnswerIndex}\r\n            />\r\n            <div className={styles.questions__buttonsContainer}>\r\n              {questionId !== 0 && (\r\n                <LeftArrowIconButton\r\n                  tooltipTitle=\"Go to previous question\"\r\n                  onClick={() => {\r\n                    onClickBackButton();\r\n                  }}\r\n                  iconStyle={{ fontSize: \"4vh\", color: colors.pink }}\r\n                />\r\n              )}\r\n              <RightArrowIconButton\r\n                tooltipTitle={\r\n                  questionId < quizData.length - 1\r\n                    ? \"Go to next question\"\r\n                    : \"Finish quiz\"\r\n                }\r\n                onClick={() => {\r\n                  questionId < quizData.length - 1\r\n                    ? selectedAnswerIndex || selectedAnswerIndex === 0\r\n                      ? onClickNextButton()\r\n                      : toggleAlertPrompt()\r\n                    : selectedAnswerIndex || selectedAnswerIndex === 0\r\n                    ? onClickFinishButton()\r\n                    : toggleAlertPrompt();\r\n                }}\r\n                iconStyle={{ fontSize: \"4vh\", color: colors.pink }}\r\n              />\r\n              <RestartIconButton\r\n                tooltipTitle=\"Restart Quiz\"\r\n                onClick={() => toggleConfirmationPrompt()}\r\n                iconStyle={{ fontSize: \"4vh\", color: colors.pink }}\r\n              />\r\n            </div>\r\n            <div className={styles.questions__progressBar}>\r\n              <ProgressBar\r\n                value={questionId + 1}\r\n                total={quizData.length}\r\n                // color=\"blue\"\r\n              />\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className={styles.questions__loadingIndicator}>\r\n            <LoadingIndicator\r\n              size=\"10vh\"\r\n              label={`${\r\n                quizData\r\n                  ? \"No Questions Available, please customize quiz and try again.\"\r\n                  : \"Questions Loading\"\r\n              }`}\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                alignItems: \"center\",\r\n              }}\r\n              quizData={quizData}\r\n              onRestart={() => restartQuiz()}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n      <ConfirmationPrompt\r\n        title=\"Confirmation\"\r\n        text=\"Are you sure you want to restart the quiz?\"\r\n        open={confirmationPrompt}\r\n        togglePrompt={toggleConfirmationPrompt}\r\n        onRestart={restartQuiz}\r\n      />\r\n      <AlertPrompt\r\n        title=\"Error\"\r\n        text=\"Please select an answer before clicking next.\"\r\n        open={alertPrompt}\r\n        togglePrompt={toggleAlertPrompt}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Questions;\r\n","import React from \"react\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\nimport * as colors from \"../../../App/standard-colors\";\r\n\r\nconst tableTheme = createMuiTheme({\r\n  overrides: {\r\n    MUIDataTable: {\r\n      responsiveScroll: {\r\n        maxHeight: \"50vh\",\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nconst Table = ({ title, columns, data }) => {\r\n  const labeledColumns = columns.map((name) => {\r\n    return {\r\n      name: name,\r\n      label: name.charAt(0).toUpperCase() + name.slice(1),\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n        setCellHeaderProps: (columnMeta) => {\r\n          return {\r\n            style: {\r\n              fontWeight: \"bold\",\r\n              color: colors.pink,\r\n            },\r\n          };\r\n        },\r\n      },\r\n    };\r\n  });\r\n\r\n  let labeledData = [];\r\n  for (let rowIndex in data) {\r\n    let rowDataObject = {};\r\n    for (let rowElementIndex in data[parseInt(rowIndex)]) {\r\n      rowDataObject = {\r\n        ...rowDataObject,\r\n        [labeledColumns[parseInt(rowElementIndex)].name]:\r\n          data[parseInt(rowIndex)][parseInt(rowElementIndex)],\r\n      };\r\n    }\r\n    labeledData = labeledData.concat(rowDataObject);\r\n  }\r\n\r\n  const options = {\r\n    // filterType: \"checkbox\",\r\n    filter: false,\r\n    setRowProps: (row, dataIndex) => {\r\n      let backgroundColor;\r\n      if (row[2] === row[3])\r\n        // if selected answer is same as correct answer\r\n        backgroundColor = \"#e0ffd9\";\r\n      // Light-green\r\n      else backgroundColor = \"#ffe6e6\"; // Light-red\r\n      return {\r\n        style: { backgroundColor },\r\n      };\r\n    },\r\n    responsive: \"scroll\",\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={tableTheme}>\r\n      <MUIDataTable\r\n        title={title}\r\n        data={labeledData}\r\n        columns={labeledColumns}\r\n        options={options}\r\n      />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport Title from \"../../components/common/Title/Title\";\r\nimport Button from \"../../components/common/buttons/Button/Button\";\r\nimport Table from \"../../components/common/Table/Table\";\r\nimport styles from \"./Results.module.css\";\r\nimport { convertToRegularString } from \"../../modules/StringModifiers\";\r\nimport * as appStyle from \"../../App/App.style\";\r\n\r\nconst Results = ({ quizData, restartQuiz }) => {\r\n  const getFinalScore = () => {\r\n    let finalScore = 0;\r\n    for (let _ of quizData) {\r\n      if (_.answers[_.selectedAnswerIndex] === _.correctAnswer) finalScore += 1;\r\n    }\r\n    return finalScore;\r\n  };\r\n\r\n  const columns = [\"#\", \"Question\", \"Your Answer\", \"Correct Answer\"];\r\n\r\n  const data = quizData.map((_) => [\r\n    _.questionNumber,\r\n    convertToRegularString(_.question),\r\n    convertToRegularString(_.answers[_.selectedAnswerIndex]),\r\n    convertToRegularString(_.correctAnswer),\r\n  ]);\r\n\r\n  return (\r\n    <div className={styles.results}>\r\n      <Title\r\n        className={styles.results__title}\r\n        title={`Final Score: ${getFinalScore()}/${quizData.length}`}\r\n      />\r\n      <Table columns={columns} data={data} title=\"Overview of Results\" />\r\n      <Button\r\n        label={\"Restart\"}\r\n        variant=\"contained\"\r\n        style={appStyle.buttonStyle}\r\n        onClick={() => restartQuiz()}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Results;\r\n","import React, { useState } from \"react\";\r\nimport Menu from \"../pages/Menu/Menu\";\r\nimport Questions from \"../pages/Questions/Questions\";\r\nimport Results from \"../pages/Results/Results\";\r\nimport AlertPrompt from \"../components/common/modals/Alert\";\r\nimport styles from \"./App.module.css\";\r\n\r\nfunction App() {\r\n  const [numberOfQuestions, setNumberOfQuestions] = useState(10);\r\n  const [category, setCategory] = useState({\r\n    name: \"Any Category\",\r\n    id: null,\r\n  });\r\n  const [difficulty, setDifficulty] = useState({\r\n    name: \"Any Difficulty\",\r\n    value: null,\r\n  });\r\n  const [type, setType] = useState({\r\n    name: \"Any Type\",\r\n    value: null,\r\n  });\r\n  const [quizData, setQuizData] = useState(null);\r\n  const [useDuration, setUseDuration] = useState(\"no\");\r\n  const [quizDuration, setQuizDuration] = useState(10);\r\n  const [currentPage, setCurrentPage] = useState(\"menu\");\r\n  const [errorPrompt, setErrorPrompt] = useState(false);\r\n\r\n  const toggleErrorPrompt = () => setErrorPrompt(!errorPrompt);\r\n\r\n  const changeNumberOfQuestions = (event) =>\r\n    setNumberOfQuestions(parseFloat(event.target.value));\r\n\r\n  const changeQuizDuration = (event) =>\r\n    setQuizDuration(parseFloat(event.target.value));\r\n\r\n  const changeCategory = (event, selectedOption) => setCategory(selectedOption);\r\n\r\n  const changeDifficulty = (event, selectedOption) =>\r\n    setDifficulty(selectedOption);\r\n\r\n  const changeType = (event, selectedOption) => setType(selectedOption);\r\n\r\n  const changeUseDuration = (event) => {\r\n    setUseDuration(event.target.value);\r\n  };\r\n\r\n  const isNumberOfQuestionsValid =\r\n    numberOfQuestions >= 1 &&\r\n    numberOfQuestions <= 50 &&\r\n    numberOfQuestions % 1 === 0;\r\n\r\n  const isFormValid = quizDuration > 0 && isNumberOfQuestionsValid;\r\n\r\n  const startQuiz = () => {\r\n    if (isFormValid) {\r\n      setCurrentPage(\"questions\");\r\n      fetch(\r\n        `https://opentdb.com/api.php?amount=${numberOfQuestions}${\r\n          category && category.id ? `&category=${category.id}` : \"\"\r\n        }${\r\n          difficulty && difficulty.value\r\n            ? `&difficulty=${difficulty.value}`\r\n            : \"\"\r\n        }${type && type.value ? `&type=${type.value}` : \"\"}`\r\n      )\r\n        .then((response) => response.json())\r\n        // .then((data) => console.log({ data }));\r\n        .then((data) =>\r\n          setQuizData(\r\n            data.results.map((object, index) => {\r\n              return {\r\n                questionNumber: index,\r\n                question: object.question,\r\n                answers: object.incorrect_answers\r\n                  .concat(object.correct_answer)\r\n                  .sort(),\r\n                correctAnswer: object.correct_answer,\r\n                selectedAnswerIndex: null,\r\n              };\r\n            })\r\n          )\r\n        );\r\n    } else toggleErrorPrompt();\r\n  };\r\n\r\n  const restartQuiz = () => {\r\n    setQuizData(null);\r\n    setCurrentPage(\"menu\");\r\n  };\r\n\r\n  const menuActions = {\r\n    changeNumberOfQuestions,\r\n    changeCategory,\r\n    changeDifficulty,\r\n    changeType,\r\n    setCurrentPage,\r\n    startQuiz,\r\n    changeQuizDuration,\r\n    changeUseDuration,\r\n  };\r\n  const menuState = {\r\n    numberOfQuestions,\r\n    category,\r\n    difficulty,\r\n    type,\r\n    isFormValid,\r\n    useDuration,\r\n    quizDuration,\r\n    isNumberOfQuestionsValid,\r\n  };\r\n  return (\r\n    <div className={styles.App}>\r\n      <div className={styles.App__card}>\r\n        {currentPage === \"menu\" && (\r\n          <Menu menuActions={menuActions} menuState={menuState} />\r\n        )}\r\n        {currentPage === \"questions\" && (\r\n          <Questions\r\n            quizData={quizData}\r\n            setQuizData={setQuizData}\r\n            setCurrentPage={setCurrentPage}\r\n            restartQuiz={restartQuiz}\r\n            quizDuration={quizDuration}\r\n            useDuration={useDuration}\r\n            currentPage={currentPage}\r\n          />\r\n        )}\r\n        {currentPage === \"results\" && (\r\n          <Results\r\n            quizData={quizData}\r\n            setQuizData={setQuizData}\r\n            setCurrentPage={setCurrentPage}\r\n            restartQuiz={restartQuiz}\r\n          />\r\n        )}\r\n        <AlertPrompt\r\n          title=\"Error\"\r\n          text=\"Please fix all errors before clicking start.\"\r\n          open={errorPrompt}\r\n          togglePrompt={toggleErrorPrompt}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__35cFE\",\"menu__title\":\"Menu_menu__title__1p0Fh\",\"menu__buttonContainer\":\"Menu_menu__buttonContainer__2MH0R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"questionsContainer\":\"Questions_questionsContainer__2epei\",\"questions__buttonsContainer\":\"Questions_questions__buttonsContainer__2zeDi\",\"questions__title\":\"Questions_questions__title__1NyzQ\",\"questions__countdownTimer\":\"Questions_questions__countdownTimer__1tEUY\",\"questions__progressBar\":\"Questions_questions__progressBar__2vgHV\",\"questions__loadingIndicator\":\"Questions_questions__loadingIndicator__1BUom\"};"],"sourceRoot":""}